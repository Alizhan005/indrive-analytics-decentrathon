
class InDriveApp {
    constructor() {
        this.map = null;
        this.isMapInitialized = false;
        this.astanaCenter = [51.169392, 71.449074];
        this.isOnline = false;
        this.currentScreen = 'mapScreen';
        this.driverMarker = null;
        this.zones = [];
        
        // –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ JSON
        this.appData = {
            "app": {"name": "inDrive", "city": "Astana", "version": "2025.1"},
            "driver": {
                "name": "–ê—Å–µ—Ç –ù—É—Ä–ª–∞–Ω–æ–≤",
                "coords": [51.169392, 71.449074],
                "rating": 4.8,
                "balance": 49700,
                "status": "online",
                "totalTrips": 2847,
                "todayEarnings": 19800,
                "car": {
                    "make": "Toyota",
                    "model": "Camry",
                    "year": 2020,
                    "color": "–ë–µ–ª—ã–π",
                    "plate": "123ABC04"
                }
            },
            "zones": [
                {
                    "id": 1,
                    "name": "–ê–ª–º–∞—Ç—ã",
                    "coords": [51.148830, 71.412530],
                    "orders": 18,
                    "multiplier": 1.5,
                    "color": "#FF6B35",
                    "radius": 1500
                },
                {
                    "id": 2,
                    "name": "–°–∞—Ä—ã–∞—Ä–∫–∞",
                    "coords": [51.180100, 71.446000],
                    "orders": 24,
                    "multiplier": 1.8,
                    "color": "#DC3545",
                    "radius": 1800
                },
                {
                    "id": 3,
                    "name": "–ï—Å–∏–ª—å",
                    "coords": [51.095667, 71.380222],
                    "orders": 12,
                    "multiplier": 1.2,
                    "color": "#FFC107",
                    "radius": 1200
                },
                {
                    "id": 4,
                    "name": "–ê—ç—Ä–æ–ø–æ—Ä—Ç",
                    "coords": [51.022222, 71.467222],
                    "orders": 15,
                    "multiplier": 1.6,
                    "color": "#FF6B35",
                    "radius": 2000
                }
            ],
            "orders": [
                {
                    "id": 1,
                    "passenger": {"name": "–ê–π–≥—É–ª—å –ö.", "avatar": "üë©üèª", "rating": 4.9},
                    "from": "–¢–†–¶ –ö–µ—Ä—É–µ–Ω",
                    "to": "–ö–∞–∑–ù–£",
                    "price": 1350,
                    "distance": "8.2 –∫–º",
                    "time": "14 –º–∏–Ω",
                    "pickup": [51.148830, 71.412530],
                    "destination": [51.180100, 71.446000]
                },
                {
                    "id": 2,
                    "passenger": {"name": "–î–∞–Ω–∏—è—Ä –°.", "avatar": "üë®üèª", "rating": 4.6},
                    "from": "–ë–∞–π—Ç–µ—Ä–µ–∫",
                    "to": "–ê—ç—Ä–æ–ø–æ—Ä—Ç",
                    "price": 2800,
                    "distance": "18.5 –∫–º",
                    "time": "22 –º–∏–Ω",
                    "pickup": [51.136871, 71.430411],
                    "destination": [51.022222, 71.467222]
                }
            ]
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–∑—É –∏–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.initializeApp());
        } else {
            // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            setTimeout(() => this.initializeApp(), 100);
        }
    }
    
    async initializeApp() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è inDrive...');
            
            // –ñ–¥–µ–º —á—Ç–æ –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            if (document.readyState !== 'complete') {
                await new Promise(resolve => {
                    window.addEventListener('load', resolve);
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Leaflet
            let attempts = 0;
            while (typeof L === 'undefined' && attempts < 50) {
                await new Promise(resolve => setTimeout(resolve, 100));
                attempts++;
            }
            
            if (typeof L === 'undefined') {
                console.error('‚ùå Leaflet –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è!');
                this.showMapFallback();
                return;
            }
            
            console.log('‚úÖ Leaflet –¥–æ—Å—Ç—É–ø–µ–Ω');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            this.setupEventListeners();
            this.setupNavigation();
            this.populateScreens();
            this.updateUI();
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            setTimeout(() => {
                this.initMap();
            }, 200);
            
            console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showMapFallback();
        }
    }
    
    initMap() {
        try {
            console.log('üó∫Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ä—Ç—ã...');
            
            const mapElement = document.getElementById('map');
            if (!mapElement) {
                console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                return;
            }
            
            console.log('üìç –≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É...');
            
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.map) {
                try {
                    this.map.remove();
                } catch (e) {
                    console.log('–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
                }
                this.map = null;
            }
            
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            mapElement.innerHTML = '';
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
            this.map = L.map('map', {
                center: this.astanaCenter,
                zoom: 12,
                zoomControl: true,
                attributionControl: false,
                preferCanvas: false
            });
            
            console.log('üó∫Ô∏è –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            const tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '¬© OpenStreetMap contributors',
                crossOrigin: true
            });
            
            tileLayer.addTo(this.map);
            
            console.log('üéØ –¢–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
            this.map.whenReady(() => {
                console.log('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞!');
                this.isMapInitialized = true;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏ –∑–æ–Ω—ã
                this.addDriverMarker();
                this.addDemandZones();
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
                setTimeout(() => {
                    if (this.map) {
                        this.map.invalidateSize();
                        console.log('üìê –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω');
                    }
                }, 500);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ç–∞–π–ª–æ–≤
            tileLayer.on('tileerror', (e) => {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–∞:', e);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–æ–≤
            tileLayer.on('load', () => {
                console.log('üé® –¢–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
            });
            
            // Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞
            setTimeout(() => {
                if (!this.isMapInitialized) {
                    console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å –∑–∞ 10 —Å–µ–∫—É–Ω–¥');
                    this.retryMapInit();
                }
            }, 10000);
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
            this.showMapFallback();
        }
    }
    
    addDriverMarker() {
        if (!this.map) {
            console.log('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞');
            return;
        }
        
        console.log('üöó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è...');
        
        try {
            // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
            const markerHtml = `
                <div class="driver-marker-container">
                    <div class="driver-pulse"></div>
                    <div class="driver-icon">üöó</div>
                </div>
            `;
            
            // –°–æ–∑–¥–∞–µ–º divIcon
            const driverIcon = L.divIcon({
                html: markerHtml,
                className: 'custom-driver-marker',
                iconSize: [30, 30],
                iconAnchor: [15, 15],
                popupAnchor: [0, -15]
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É
            this.driverMarker = L.marker(this.astanaCenter, { 
                icon: driverIcon,
                title: '–ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
            }).addTo(this.map);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø–∞–ø
            this.driverMarker.bindPopup(`
                <div class="driver-popup">
                    <div class="popup-header">
                        <strong>üöó ${this.appData.driver.name}</strong>
                    </div>
                    <div class="popup-info">
                        ‚≠ê ${this.appData.driver.rating} ‚Ä¢ ${this.appData.driver.car.make} ${this.appData.driver.car.model}
                    </div>
                    <div class="popup-status">
                        <span style="color: #00C853;">üü¢ –í —Å–µ—Ç–∏</span>
                    </div>
                </div>
            `, {
                maxWidth: 200,
                closeButton: true
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
            this.addDriverMarkerStyles();
            
            console.log('‚úÖ –ú–∞—Ä–∫–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è:', error);
        }
    }
    
    addDriverMarkerStyles() {
        if (document.getElementById('driver-marker-styles')) return;

        const style = document.createElement('style');
        style.id = 'driver-marker-styles';
        style.textContent = `
            .custom-driver-marker {
                background: transparent !important;
                border: none !important;
            }
            
            .driver-marker-container {
                position: relative;
                width: 30px;
                height: 30px;
            }
            
            .driver-pulse {
                position: absolute;
                top: 50%;
                left: 50%;
                width: 30px;
                height: 30px;
                border: 3px solid #00C853;
                border-radius: 50%;
                transform: translate(-50%, -50%);
                animation: driverPulse 2s ease-out infinite;
            }
            
            .driver-icon {
                position: absolute;
                top: 50%;
                left: 50%;
                width: 20px;
                height: 20px;
                background: white;
                border: 3px solid #00C853;
                border-radius: 50%;
                transform: translate(-50%, -50%);
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 10px;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
                z-index: 2;
            }
            
            @keyframes driverPulse {
                0% {
                    transform: translate(-50%, -50%) scale(1);
                    opacity: 1;
                }
                100% {
                    transform: translate(-50%, -50%) scale(2);
                    opacity: 0;
                }
            }
            
            .driver-popup {
                text-align: center;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            }
            
            .popup-header {
                font-size: 16px;
                font-weight: 600;
                margin-bottom: 8px;
                color: #212529;
            }
            
            .popup-info {
                font-size: 14px;
                color: #6C757D;
                margin-bottom: 8px;
            }
            
            .popup-status {
                font-size: 14px;
                font-weight: 500;
            }
        `;
        document.head.appendChild(style);
    }
    
    addDemandZones() {
        if (!this.map) {
            console.log('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω');
            return;
        }
        
        console.log('üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω —Å–ø—Ä–æ—Å–∞...');
        
        try {
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–æ–Ω—ã
            this.zones.forEach(zone => {
                if (zone.layer) {
                    this.map.removeLayer(zone.layer);
                }
            });
            this.zones = [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–æ–Ω—É
            this.appData.zones.forEach((zone, index) => {
                console.log(`üìç –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—É: ${zone.name}`);
                
                // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –∑–æ–Ω—É
                const circle = L.circle(zone.coords, {
                    radius: zone.radius,
                    fillColor: zone.color,
                    color: zone.color,
                    weight: 2,
                    fillOpacity: 0.15,
                    opacity: 0.8
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É
                circle.addTo(this.map);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø–∞–ø
                circle.bindPopup(`
                    <div class="zone-popup">
                        <div class="zone-header">
                            <h4 style="color: ${zone.color}; margin: 0 0 8px 0; font-size: 16px;">
                                üìç ${zone.name}
                            </h4>
                        </div>
                        <div class="zone-info">
                            <div style="margin: 4px 0;">
                                <strong>–ó–∞–∫–∞–∑–æ–≤:</strong> ${zone.orders}
                            </div>
                            <div style="margin: 4px 0;">
                                <strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</strong> x${zone.multiplier}
                            </div>
                        </div>
                    </div>
                `, {
                    maxWidth: 200,
                    closeButton: true
                });
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–æ–Ω—É
                this.zones.push({
                    ...zone,
                    layer: circle
                });
                
                console.log(`‚úÖ –ó–æ–Ω–∞ ${zone.name} –¥–æ–±–∞–≤–ª–µ–Ω–∞`);
            });
            
            console.log('‚úÖ –í—Å–µ –∑–æ–Ω—ã —Å–ø—Ä–æ—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω:', error);
        }
    }
    
    showMapFallback() {
        console.warn('üîÑ –ü–æ–∫–∞–∑ fallback –¥–ª—è –∫–∞—Ä—Ç—ã...');
        const mapElement = document.getElementById('map');
        if (mapElement) {
            mapElement.innerHTML = `
                <div class="map-fallback">
                    <div class="fallback-icon">üó∫Ô∏è</div>
                    <div class="fallback-text">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –ê—Å—Ç–∞–Ω—ã...</div>
                    <div class="fallback-subtext">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</div>
                    <button onclick="app.retryMapInit()" class="retry-btn">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É</button>
                </div>
            `;
        }
    }
    
    retryMapInit() {
        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã...');
        this.isMapInitialized = false;
        
        const mapElement = document.getElementById('map');
        if (mapElement) {
            mapElement.innerHTML = '';
        }
        
        setTimeout(() => {
            this.initMap();
        }, 500);
    }

    setupEventListeners() {
        console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è
        const driverStatus = document.getElementById('driverStatus');
        const fabBtn = document.getElementById('goOnlineBtn');
        
        if (driverStatus) {
            driverStatus.addEventListener('click', (e) => {
                e.preventDefault();
                this.toggleDriverStatus();
            });
        }

        if (fabBtn) {
            fabBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.toggleDriverStatus();
            });
        }

        // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π
        this.setupMapControls();
        
        // –§–∏–ª—å—Ç—Ä—ã –∑–æ–Ω
        this.setupZoneFilters();
        
        // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        this.setupProfileActions();
        
        // –í–∫–ª–∞–¥–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.setupFilterTabs();
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    toggleDriverStatus() {
        this.isOnline = !this.isOnline;
        console.log(`üöó –°—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è: ${this.isOnline ? '–û–ù–õ–ê–ô–ù' : '–û–§–õ–ê–ô–ù'}`);
        
        this.updateDriverStatusUI();
        
        if (this.isOnline) {
            this.goOnline();
        } else {
            this.goOffline();
        }
    }

    updateDriverStatusUI() {
        const statusIndicator = document.getElementById('statusIndicator');
        const statusText = document.getElementById('statusText');
        const fabBtn = document.getElementById('goOnlineBtn');
        const fabIcon = fabBtn?.querySelector('.fab-icon');
        const fabText = fabBtn?.querySelector('.fab-text');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        if (statusIndicator) {
            statusIndicator.classList.toggle('online', this.isOnline);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        if (statusText) {
            statusText.textContent = this.isOnline ? '–í —Å–µ—Ç–∏' : '–û—Ñ–ª–∞–π–Ω';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º FAB –∫–Ω–æ–ø–∫—É
        if (fabBtn && fabIcon && fabText) {
            if (this.isOnline) {
                fabBtn.classList.add('online');
                fabIcon.textContent = 'üõë';
                fabText.textContent = '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É';
            } else {
                fabBtn.classList.remove('online');
                fabIcon.textContent = 'üöó';
                fabText.textContent = '–í—ã–π—Ç–∏ –≤ —Å–µ—Ç—å';
            }
        }
    }

    goOnline() {
        console.log('‚úÖ –í—ã—Ö–æ–¥ –≤ —Å–µ—Ç—å...');
        this.showNotification('‚úÖ –í —Å–µ—Ç–∏', '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            this.showAvailableOrder();
        }, 2000);
    }

    goOffline() {
        console.log('‚≠ï –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã...');
        this.hideOrderCards();
        this.showNotification('‚≠ï –û—Ñ–ª–∞–π–Ω', '–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    showAvailableOrder() {
        if (!this.isOnline || this.appData.orders.length === 0) return;
        
        const container = document.getElementById('orderCardsContainer');
        if (!container) return;

        const order = this.appData.orders[0];
        const orderCard = this.createOrderCard(order);
        
        container.innerHTML = '';
        container.appendChild(orderCard);
        console.log('üìã –ó–∞–∫–∞–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω');
    }

    createOrderCard(order) {
        const orderCard = document.createElement('div');
        orderCard.className = 'order-card';
        
        orderCard.innerHTML = `
            <div class="order-header">
                <div class="passenger-info">
                    <div class="passenger-avatar">${order.passenger.avatar}</div>
                    <div class="passenger-details">
                        <div class="passenger-name">${order.passenger.name}</div>
                        <div class="passenger-rating">‚≠ê ${order.passenger.rating}</div>
                    </div>
                </div>
                <div class="order-price">
                    <div class="price-amount">${order.price.toLocaleString()}‚Ç∏</div>
                    <div class="price-distance">${order.distance}</div>
                </div>
            </div>
            <div class="order-route">
                <div class="route-point">
                    <div class="route-icon">üü¢</div>
                    <div class="route-details">
                        <div class="route-address">${order.from}</div>
                        <div class="route-time">${order.time}</div>
                    </div>
                </div>
                <div class="route-point">
                    <div class="route-icon">üî¥</div>
                    <div class="route-details">
                        <div class="route-address">${order.to}</div>
                        <div class="route-time">~15 –º–∏–Ω</div>
                    </div>
                </div>
            </div>
            <div class="order-actions">
                <button class="order-action-btn decline">
                    <span>‚ùå</span>
                    <span>–û—Ç–∫–ª–æ–Ω–∏—Ç—å</span>
                </button>
                <button class="order-action-btn accept">
                    <span>‚úÖ</span>
                    <span>–ü—Ä–∏–Ω—è—Ç—å</span>
                </button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        const acceptBtn = orderCard.querySelector('.accept');
        const declineBtn = orderCard.querySelector('.decline');
        
        if (acceptBtn) {
            acceptBtn.addEventListener('click', () => this.acceptOrder(order.id));
        }
        
        if (declineBtn) {
            declineBtn.addEventListener('click', () => this.declineOrder(order.id));
        }
        
        return orderCard;
    }

    acceptOrder(orderId) {
        console.log('‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç:', orderId);
        this.hideOrderCards();
        this.showNotification('üéâ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!', '–ï–¥–µ—Ç–µ –∫ –ø–∞—Å—Å–∞–∂–∏—Ä—É');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        const order = this.appData.orders.find(o => o.id === orderId);
        if (order) {
            this.appData.driver.balance += order.price;
            this.updateBalance();
        }
    }

    declineOrder(orderId) {
        console.log('‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω:', orderId);
        this.hideOrderCards();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (this.isOnline) {
                this.showAvailableOrder();
            }
        }, 3000);
    }

    hideOrderCards() {
        const container = document.getElementById('orderCardsContainer');
        if (container) {
            container.innerHTML = '';
        }
    }

    setupMapControls() {
        const controls = ['myLocationBtn', 'layersBtn', 'trafficBtn'];
        
        controls.forEach(controlId => {
            const btn = document.getElementById(controlId);
            if (btn) {
                btn.addEventListener('click', () => this.handleMapControlClick(controlId));
            }
        });
    }

    handleMapControlClick(controlId) {
        switch(controlId) {
            case 'myLocationBtn':
                this.centerMapOnDriver();
                break;
            case 'layersBtn':
                this.showNotification('üó∫Ô∏è –°–ª–æ–∏ –∫–∞—Ä—Ç—ã', '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–æ–µ–≤ –∫–∞—Ä—Ç—ã');
                break;
            case 'trafficBtn':
                this.showNotification('üö¶ –ü—Ä–æ–±–∫–∏', '–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–∫–∞—Ö');
                break;
        }
    }

    centerMapOnDriver() {
        if (this.map && this.driverMarker) {
            this.map.setView(this.astanaCenter, 15);
            this.driverMarker.openPopup();
            this.showNotification('üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª–µ');
        }
    }

    setupZoneFilters() {
        const filterBtns = document.querySelectorAll('.filter-btn');
        
        filterBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const filter = btn.dataset.filter;
                this.setZoneFilter(filter, btn);
            });
        });
    }

    setZoneFilter(filter, activeBtn) {
        const filterBtns = document.querySelectorAll('.filter-btn');
        filterBtns.forEach(btn => btn.classList.remove('active'));
        
        if (activeBtn) {
            activeBtn.classList.add('active');
        }
        
        const filterNames = {
            'all': '–í—Å–µ –∑–æ–Ω—ã',
            'high': '–ì–æ—Ä—è—á–∏–µ –∑–æ–Ω—ã', 
            'traffic': '–ë—ã—Å—Ç—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã'
        };
        
        this.showNotification('üéØ –§–∏–ª—å—Ç—Ä', `–ü–æ–∫–∞–∑–∞–Ω—ã: ${filterNames[filter] || '–í—Å–µ –∑–æ–Ω—ã'}`);
    }

    setupNavigation() {
        const navItems = document.querySelectorAll('.nav-item');
        
        navItems.forEach(item => {
            const screen = item.dataset.screen;
            item.addEventListener('click', () => this.switchScreen(screen));
        });
    }

    switchScreen(screenName) {
        if (!screenName) return;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        const screens = document.querySelectorAll('.screen');
        screens.forEach(screen => screen.classList.remove('active'));

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —ç–∫—Ä–∞–Ω
        const targetScreen = document.getElementById(screenName);
        if (targetScreen) {
            targetScreen.classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        this.updateNavigation(screenName);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤
        this.handleScreenSpecificActions(screenName);
        
        this.currentScreen = screenName;
    }

    updateNavigation(activeScreen) {
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => {
            const isActive = item.dataset.screen === activeScreen;
            item.classList.toggle('active', isActive);
        });
    }

    handleScreenSpecificActions(screenName) {
        switch(screenName) {
            case 'mapScreen':
                setTimeout(() => {
                    if (this.map) {
                        this.map.invalidateSize();
                        console.log('üó∫Ô∏è –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏');
                    }
                }, 200);
                break;
            case 'earningsScreen':
                setTimeout(() => this.initEarningsChart(), 300);
                break;
        }
    }

    setupProfileActions() {
        const profileBtns = document.querySelectorAll('.profile-btn');
        profileBtns.forEach(btn => {
            btn.addEventListener('click', () => this.handleProfileAction(btn));
        });
    }

    handleProfileAction(btn) {
        const text = btn.textContent;
        
        if (text.includes('–î–æ–∫—É–º–µ–Ω—Ç—ã')) {
            this.showNotification('üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã', '–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã');
        } else if (text.includes('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')) {
            this.showNotification('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–û—Ç–∫—Ä–æ–µ—Ç—Å—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        } else if (text.includes('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞')) {
            this.showNotification('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
        } else if (text.includes('–ü–æ–¥–¥–µ—Ä–∂–∫–∞')) {
            this.showNotification('‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 24/7');
        }
    }

    setupFilterTabs() {
        const tabBtns = document.querySelectorAll('.tab-btn');
        
        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const period = btn.dataset.period;
                this.setTimePeriod(period, btn);
            });
        });
    }

    setTimePeriod(period, activeBtn) {
        const tabBtns = document.querySelectorAll('.tab-btn');
        tabBtns.forEach(btn => btn.classList.remove('active'));
        
        if (activeBtn) {
            activeBtn.classList.add('active');
        }
    }

    populateScreens() {
        this.populateOrdersScreen();
    }

    populateOrdersScreen() {
        const ordersList = document.getElementById('ordersList');
        if (!ordersList) return;

        const sampleOrders = [
            { time: '14:30', route: '–¢–†–¶ –ö–µ—Ä—É–µ–Ω ‚Üí –ö–∞–∑–ù–£', earnings: '1,350‚Ç∏', distance: '8.2 –∫–º' },
            { time: '13:45', route: '–ë–∞–π—Ç–µ—Ä–µ–∫ ‚Üí –ê—ç—Ä–æ–ø–æ—Ä—Ç', earnings: '2,800‚Ç∏', distance: '18.5 –∫–º' },
            { time: '12:20', route: '–•–∞–Ω –®–∞—Ç—ã—Ä ‚Üí –ù–∞–∑–∞—Ä–±–∞–µ–≤ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', earnings: '980‚Ç∏', distance: '6.8 –∫–º' },
            { time: '11:15', route: '–°–∞—Ä—ã–∞—Ä–∫–∞ ‚Üí –ï—Å–∏–ª—å', earnings: '1,200‚Ç∏', distance: '7.3 –∫–º' },
            { time: '10:30', route: '–ê–ª–º–∞—Ç—ã ‚Üí –¶–µ–Ω—Ç—Ä', earnings: '1,450‚Ç∏', distance: '9.1 –∫–º' }
        ];

        ordersList.innerHTML = sampleOrders.map(order => `
            <div class="order-item">
                <div class="order-item-header">
                    <div class="order-time">${order.time}</div>
                    <div class="order-earnings">${order.earnings}</div>
                </div>
                <div class="order-route-summary">${order.route}</div>
                <div class="order-details">
                    <span>${order.distance}</span>
                    <span>‚≠ê 4.8</span>
                </div>
            </div>
        `).join('');
    }

    initEarningsChart() {
        const canvas = document.getElementById('earningsChart');
        if (!canvas || typeof Chart === 'undefined') return;

        const ctx = canvas.getContext('2d');
        
        if (this.earningsChart) {
            this.earningsChart.destroy();
        }

        this.earningsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
                datasets: [{
                    label: '–î–æ—Ö–æ–¥—ã',
                    data: [18350, 22180, 19640, 26420, 28950, 31200, 19850],
                    borderColor: '#1FB8CD',
                    backgroundColor: 'rgba(31, 184, 205, 0.1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4,
                    pointRadius: 6,
                    pointBackgroundColor: '#1FB8CD',
                    pointBorderColor: 'white',
                    pointBorderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: { color: 'rgba(0,0,0,0.05)' },
                        ticks: {
                            callback: value => value.toLocaleString() + '‚Ç∏'
                        }
                    },
                    x: {
                        grid: { display: false }
                    }
                }
            }
        });
    }

    updateUI() {
        this.updateBalance();
    }

    updateBalance() {
        const balanceEl = document.getElementById('balance');
        if (balanceEl) {
            balanceEl.textContent = `${this.appData.driver.balance.toLocaleString()}‚Ç∏`;
        }
    }

    showNotification(title, message) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const existing = document.querySelectorAll('.notification');
        existing.forEach(n => n.remove());
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-title">${title}</div>
                <div class="notification-message">${message}</div>
            </div>
        `;

        // –°—Ç–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        Object.assign(notification.style, {
            position: 'fixed',
            top: '90px',
            left: '16px',
            right: '16px',
            background: 'white',
            borderRadius: '12px',
            padding: '16px',
            boxShadow: '0 4px 16px rgba(0,0,0,0.15)',
            zIndex: '9999',
            fontSize: '14px',
            transform: 'translateY(-20px)',
            opacity: '0',
            transition: 'all 0.3s ease'
        });

        const titleEl = notification.querySelector('.notification-title');
        const messageEl = notification.querySelector('.notification-message');
        
        if (titleEl) {
            titleEl.style.fontWeight = '600';
            titleEl.style.marginBottom = '4px';
            titleEl.style.color = '#212529';
        }
        
        if (messageEl) {
            messageEl.style.color = '#6C757D';
            messageEl.style.fontSize = '13px';
        }

        document.body.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateY(0)';
            notification.style.opacity = '1';
        }, 10);

        // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.transform = 'translateY(-20px)';
            notification.style.opacity = '0';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;

// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
function initializeApp() {
    if (!app) {
        console.log('üéâ –ó–∞–ø—É—Å–∫ inDrive –¥–ª—è –ê—Å—Ç–∞–Ω—ã...');
        app = new InDriveApp();
        window.app = app; // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
    }
}

// –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    initializeApp();
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
    if (!app) {
        initializeApp();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
    if (app?.map) {
        setTimeout(() => {
            try {
                app.map.invalidateSize();
                console.log('üìê –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞');
            } catch (e) {
                console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            }
        }, 100);
    }
});